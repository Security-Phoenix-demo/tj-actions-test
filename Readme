Readme

Please change your orgname in tj-action-search-phoenix-V2-with-upload.py and tj-action-search-phoenix-V2.py


def search_code_in_org(org_name="Security-Phoenix-demo"):
    """
    Search for lines referencing 'tj-actions/changed-files'.
    Prompts once for an organization name if it isn't set,
    then also prompts for GITHUB_TOKEN if missing.
    """

Github Action Test script

# GitHub Workflow – tj-actions/changed-files Scanner

This repository contains a Python script (and related configurations) designed to locate and highlight insecure references to [tj-actions/changed-files](https://github.com/tj-actions/changed-files). It helps detect specific, potentially unsafe versions of the action within an organization or codebase.

## Overview

- **Purpose**: Scan GitHub repositories for usage of `tj-actions/changed-files@...` versions which may contain known vulnerabilities or allow for command injection in changed filenames.  
- **Behavior**: The script queries the GitHub Code Search API for references to `tj-actions/changed-files`, checks for known compromised versions (`v35`, `v1.1.3`, `0e58ed8671d6b60d0890c21b07f8835ace038e67`), and reports the resulting vulnerabilities in CSV, JSON, and Phoenix-compatible JSON formats.

## Vulnerability: Command Injection & Secret Leakage

### Summary
The `tj-actions/changed-files` workflow can allow command injection in changed filenames, enabling a malicious actor to execute arbitrary code and potentially leak secrets from GitHub Runners.

### Details
1. **Issue**:  
   - The changed-files action returns a list of files changed in a commit or pull request, providing an `escape_json` input that only escapes `"` for JSON values.  
   - Filenames containing special shell characters such as `;` or <code>`</code> (backtick) could allow malicious code to execute on the GitHub Runner if the output value is used in a raw shell context (e.g., embedded unquoted in a run block).

2. **How it can be exploited**:  
   - If triggered on events such as `push` (rather than the safer `pull_request`), an attacker could embed shell commands in a filename.  
   - GitHub’s default shell environment (e.g. `bash`) would interpret these commands if the filename is used without proper quoting, thereby running malicious code which could read or exfiltrate secrets like the `GITHUB_TOKEN`.

### Proof of Concept
1. Create and push a pull request to a repository with a new file named `$(whoami).txt`.  
2. Approve the pull request and run the workflow.  
3. The malicious filename flows into the “List all changed files” step as a shell-unsafe variable.  
4. The GitHub Runner interprets the filename, potentially executing the embedded commands.

**Snippet of the unsafe run block**:
```bash
- name: List all changed files
  run: |
    for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
      echo "$file was changed"
    done
```
If `steps.changed-files.outputs.all_changed_files` includes something like `$(whoami).txt`, the shell interprets `$(whoami)` in the loop, effectively introducing arbitrary command execution.

### Impact
- **Arbitrary Command Execution**: Attackers can run commands on the GitHub Runner, potentially reading secrets or performing actions with the `GITHUB_TOKEN`.  
- **Secret Leakage**: Sensitive data stored as environment variables (secrets) in the repository or organization can be extracted.

### Resolution
1. **Update**: Enable or implement a safer output for `tj-actions/changed-files` that escapes all special shell characters (`;`, backticks, `$`, `(`, `)` etc.).  
2. **Recommendation**:  
   - Remove or replace compromised references to `tj-actions/changed-files`.  
   - Use environment variables for changed filenames to ensure they are properly quoted (e.g., `env: ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}`).  
   - Always handle untrusted input with care in your GitHub Action workflows.  
3. **Rotate Credentials**: If you suspect secret exposure, revoke or rotate credentials, tokens, and keys.

## Re-Scoring for Specific Versions
* The script checks for certain versions and assigns a severity score:  
  - For `tj-actions/changed-files@v35` or `v1.1.3` → **Severity 7**  
  - For `tj-actions/changed-files@0e58ed8671d6b60d0890c21b07f8835ace038e67` → **Severity 9.8**  
* Each detection is accompanied by a multi-line advisory in the script’s outputs to clarify the risk level and recommended steps.

## Usage (Scanning)

1. **Install Dependencies**  
   ```bash
   pip install requests
   ```
2. **Set or Prompt for GITHUB_TOKEN**  
   - Provide your GitHub personal access token via an environment variable:  
     ```bash
     export GITHUB_TOKEN="YOUR_GITHUB_PAT"
     ```
   - **Or** let the script prompt you interactively on execution.
3. **Run the Script**  
   ```bash
   python tj_action_search_phoenix.py
   ```
4. **Outputs**:  
   - `tj_action_vulns.csv` — CSV summary of vulnerabilities.  
   - `tj_action_vulns.json` — JSON summary of vulnerabilities.  
   - `tj_action_vulns_phoenix.json` — Phoenix-compatible JSON for ingestion into a Phoenix platform instance.

## Further Resources
- **Keeping your GitHub Actions and workflows secure (Part 1)**: [Link](https://github.blog/2022-05-09-github-actions-all-you-need-to-know/)  
- **Keeping your GitHub Actions and workflows secure (Part 2)**: [Link](https://github.blog/2022-07-20-github-actions-how-to-prevent-pwn-requests/)  

## License
This project is licensed under the [MIT License](LICENSE).
